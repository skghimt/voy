apply plugin: 'java'
apply plugin: 'application'

apply from: 'dependencies.gradle'
sourceCompatibility = 1.7

//删除父目录下的test，避免test task执行失败
delete "${buildDir}/classes/test"


buildscript{
    repositories { maven { url 'http://repository.sonatype.org/content/groups/public/' } }

    dependencies{
//        classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.4'
//        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1+'
    }
}

tasks.withType(Compile) {
    options.encoding = "UTF-8"
}

/** 此闭包内的声明子类皆可使用 */
allprojects {
    group = 'cn.thinkjoy.im'
    version = '0.0.1-SNAPSHOT'

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'
//    apply plugin: 'maven-publish-auth'

    repositories {
        repositories { maven { url 'http://repository.sonatype.org/content/groups/public/' } }
        mavenLocal()
        mavenCentral()
    }
}

//拷贝根目录下的所有test到各自子module下
task "copytest" <<{
    def fromPath
    def toPath
    subprojects.each {
        fromPath = "${project.buildDir}/classes/test/${it.name}"
        toPath = "${it.buildDir}/classes/test"

        copy {
            from fromPath
            into toPath
        }

    }
}

task createREADME(){
    file("README.md").createNewFile()
}

subprojects{

    task "createJavaProject" << {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }

        /** 可选生成子文件夹 */
        file("src/main/filters").mkdirs()
        file("src/main/assembly").mkdirs()
        file("src/main/config").mkdirs()
        file("src/main/scripts").mkdirs()

        /** 填充文件，便于git提交 */
        file("src/main/java/cn/thinkjoy").mkdirs()
        file("src/main/java/cn/thinkjoy/package-info.java").createNewFile()
        file("src/main/resources").mkdirs()
        file("src/main/resources/spring.xml").createNewFile()

        file("src/test/java/cn/thinkjoy").mkdirs()
        file("src/test/java/cn/thinkjoy/package-info.java").createNewFile()
        file("src/test/resources/spring.xml").createNewFile()
    }

    /** 有时候会报错，但需要执行 */
    task createREADME(){
        file("README.md").createNewFile()
    }

    configurations {
        provided
        compile.extendsFrom provided

        all*.exclude group: 'org.springframework', module: 'spring'
        all*.exclude group: 'asm', module: 'asm'
        //排除log4j桥接，只允许使用logback
        all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }

    dependencies{

    }
}


configure(subprojects.findAll{it.name.contains('war')}){
    apply plugin: 'war'

    task createWebProject(dependsOn: 'createJavaProject') << {
        def webAppDir = file("$webAppDirName")
        webAppDir.mkdirs()

        file("src/main/resources/config").mkdirs()
    }

}





